package main

import (
	"flag"
	"log"
	"net/url"
	"os"
	"os/signal"
	"time"

	"github.com/gorilla/websocket"
)

var addr = flag.String("addr", "localhost:8000", "http service address")

func main(){
	flag.Parse()
	log.SetFlags(0)

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt)
	
	u := url.URL{Scheme: "ws", Host: *addr, Path: "/rpc"}
	log.Printf("connecting to %s", u.String())

	// Fuck all this shit!
	// I'm getting out!
	// Fuck all of you!

	c, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
	if err != nil{
		log.Fatal("Dial error:", err)
	}
	defer c.Close()

	done := make(chan struct{})
	
	go func() {
		defer close(done)
		for {
			_, message, err := c.ReadMessage()
			if err != nil{
				log.Print(`err`, err)
				return
			}
			log.Printf("Got message: %s", message)
		}
	}()

	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()

	for {
		select {
		case <- done: 
			return 

		case t := <- ticker.C:
			message := `{"request": "docker.image", "arguments":{"since": "13"}}`
			// err := c.WriteMessage(websocket.TextMessage, []byte(t.String()))
			log.Println(t.String())
			err := c.WriteMessage(websocket.TextMessage, []byte(message))
			if err != nil{
				log.Println("write: ", err)
				return 
			}
		case <- interrupt:
			log.Print("interrupt")
			
			err := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
			if err != nil{
				log.Println("write close: ", err)
				return
			}
			select {
			case <- done:
			case <-time.After(time.Second):
			}
			return 
		}
	}
	
}